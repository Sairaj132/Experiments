{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Y53E9uqBHpjk4WNX2qD3qDd0ZkyQouKO","timestamp":1676536145855},{"file_id":"https://github.com/profanup/DS_PY_2122/blob/main/experiment02_numpy.ipynb","timestamp":1675930876107}],"collapsed_sections":["WigRtVzrvEoy","xCEKacaQwcb2","c20zcRzBxxey","FhIMJjgcx1eD","_fIZQ4AKzf3e","QhHVb0nMGphd","hwr6_1yvKQf9","aEoCkO4ZLT7W","8IIrPEOAVPd_","ikdPJUKUW0lU","Z7qeID5QXLv_","weHsUSMJY1DT","bB5Ib1CsZ2rM","OzROt5Aa_Qxx"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**Experiment No :** 01\n","\n","**Aim :** Learn basics of Numpy library for storing and efficiently processing any external data into python execution pipeline.\n","\n","**Theory :**  **NumPy** (short for Numerical Python) provides an efficient interface to store and operate on dense data buffers. In some ways, *NumPy arrays* are like Python's built-in *list type*, but NumPy arrays provide much more *efficient storage* and *data operations* as the arrays grow larger in size. NumPy arrays form the core of nearly the entire ecosystem of data science tools in Python\n","\n","NumPy is a Python library used for working with arrays. It also has functions for working in domain of linear algebra, fourier transform, and matrices. NumPy was created in 2005 by Travis Oliphant. It is an open source project and you can use it freely.\n","\n","In Python we have lists that serve the purpose of arrays, but they are slow to process. NumPy aims to provide an array object that is up to 50x faster than traditional Python lists. The array object in NumPy is called *ndarray*, it provides a lot of supporting functions that make working with *ndarray* very easy.\n","Arrays are very frequently used in data science, where speed and resources are very important.\n","\n","NumPy arrays are stored at one continuous place in memory unlike lists, so processes can access and manipulate them very efficiently. This behavior is called locality of reference in computer science. This is the main reason why NumPy is faster than lists. Also it is optimized to work with latest CPU architectures.\n","\n"],"metadata":{"id":"eTOpwleUjhEc"}},{"cell_type":"markdown","source":["**Working :**"],"metadata":{"id":"wXeSkgt6EAur"}},{"cell_type":"code","execution_count":7,"metadata":{"id":"aci_dNppq6Dm","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"4c6c1525-223a-4c51-aa3a-59820bbdd891","executionInfo":{"status":"ok","timestamp":1676532468864,"user_tz":-330,"elapsed":373,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'1.21.6'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":7}],"source":["import numpy\n","numpy.__version__"]},{"cell_type":"markdown","source":["**A Python List Is More Than Just a List**\n","\n","Let's consider now what happens when we use a Python data structure that holds many Python objects. The standard mutable multi-element container in Python is the list. We can create a list of integers as follows:"],"metadata":{"id":"o8DgaYQBuiz8"}},{"cell_type":"code","source":["L = list(range(10))\n","L"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0misdp5Luo8h","outputId":"de79512b-4dff-4c77-cbc1-eae7fa9caa3d","executionInfo":{"status":"ok","timestamp":1676532470629,"user_tz":-330,"elapsed":1155,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}}},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["type(L[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nEY3A3fKur-v","outputId":"9e60d2e0-119a-46b8-e386-9a4021bdc70b","executionInfo":{"status":"ok","timestamp":1676532470630,"user_tz":-330,"elapsed":122,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}}},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["int"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["L2 = [str(c) for c in L]\n","L2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"peiODg-wu0UP","outputId":"7e1b7d8a-497a-4600-dfde-60c2bcb08345","executionInfo":{"status":"ok","timestamp":1676532470630,"user_tz":-330,"elapsed":119,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}}},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["type(L2[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VtIcV8pVu29N","outputId":"8c5e97f1-8f62-4ce2-952d-1146f064e3b9","executionInfo":{"status":"ok","timestamp":1676532470630,"user_tz":-330,"elapsed":115,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}}},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["str"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["L3 = [True, \"2\", 3.0, 4]\n","[type(item) for item in L3]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yvmZGyteu6vH","outputId":"28eae26b-aa23-4d8a-e8a7-da06d9ab0db7","executionInfo":{"status":"ok","timestamp":1676532470631,"user_tz":-330,"elapsed":114,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}}},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[bool, str, float, int]"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["## Fixed-Type Arrays in Python\n","\n","Python offers several different options for storing data in efficient, fixed-type data buffers.\n","The built-in ``array`` module (available since Python 3.3) can be used to create dense arrays of a uniform type:"],"metadata":{"id":"WigRtVzrvEoy"}},{"cell_type":"code","source":["import array\n","L = list(range(10))\n","A = array.array('i', L)\n","A"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Mtu3TuuGvKZW","outputId":"ac426aeb-26a4-4f72-92fe-d8e34ef0f594","executionInfo":{"status":"ok","timestamp":1676532470631,"user_tz":-330,"elapsed":111,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}}},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array('i', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","source":["\n","## Creating Arrays from Python Lists\n","\n","First, we can use ``np.array`` to create arrays from Python lists:"],"metadata":{"id":"xCEKacaQwcb2"}},{"cell_type":"code","source":["import numpy as np\n","# integer array:\n","np.array([1, 4, 2, 5,3]) "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Df2kJJVKwd1V","outputId":"51e5f089-33a3-44d8-f305-13abfa44364e","executionInfo":{"status":"ok","timestamp":1676532470632,"user_tz":-330,"elapsed":109,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}}},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 4, 2, 5, 3])"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["import numpy as np\n","# i"],"metadata":{"id":"zdLp14GiAMhG","executionInfo":{"status":"ok","timestamp":1676532470632,"user_tz":-330,"elapsed":107,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}}},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":["Remember that unlike Python lists, NumPy is constrained to arrays that all contain the same type. If types do not match, NumPy will upcast if possible (here, integers are up-cast to floating point):"],"metadata":{"id":"aSXNgXDbwqyU"}},{"cell_type":"code","source":["np.array([3.14, 4, 2, 3])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SFoqtm67wqd4","outputId":"0c1c8cc6-752c-4a96-d9b2-8ff97d2c3416","executionInfo":{"status":"ok","timestamp":1676532470632,"user_tz":-330,"elapsed":106,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}}},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3.14, 4.  , 2.  , 3.  ])"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","source":["If we want to explicitly set the data type of the resulting array, we can use the ``dtype`` keyword:"],"metadata":{"id":"zCM50ofhwxy-"}},{"cell_type":"code","source":["np.array([1, 2, 3, 4], dtype='float32')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"58Ra0aDMw2oL","outputId":"86225885-7f89-467c-e4ef-78a4da100892","executionInfo":{"status":"ok","timestamp":1676532470633,"user_tz":-330,"elapsed":105,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}}},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1., 2., 3., 4.], dtype=float32)"]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","source":["Finally, unlike Python lists, NumPy arrays can explicitly be multi-dimensional; here's one way of initializing a multidimensional array using a list of lists:"],"metadata":{"id":"TTFC1GqJxfzn"}},{"cell_type":"code","source":["# nested lists result in multi-dimensional arrays\n","np.array([range(i, i + 3) for i in [2, 4, 6]])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EPgUUQZ-xYpd","outputId":"9b0b6124-fb32-48f2-93c1-afcec11e72e8","executionInfo":{"status":"ok","timestamp":1676532470633,"user_tz":-330,"elapsed":102,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}}},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[2, 3, 4],\n","       [4, 5, 6],\n","       [6, 7, 8]])"]},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","source":["## Creating Arrays from Scratch\n","\n","Especially for larger arrays, it is more efficient to create arrays from scratch using routines built into NumPy.\n","Here are several examples:"],"metadata":{"id":"c20zcRzBxxey"}},{"cell_type":"code","source":["# Create a length-10 integer array filled with zeros\n","np.zeros(10, dtype=int)"],"metadata":{"id":"4Df8zJxFxBdq","executionInfo":{"status":"ok","timestamp":1676532470633,"user_tz":-330,"elapsed":100,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"f4883cce-115c-43b9-fc1e-28ab82155ba7","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["# Create a 3x5 floating-point array filled with ones\n","np.ones((3, 5), dtype=float)"],"metadata":{"id":"YeqU_GSexC5m","executionInfo":{"status":"ok","timestamp":1676532470634,"user_tz":-330,"elapsed":99,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"27be583f-ecb2-4259-e9b6-c528abd02daa","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1.]])"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["# Create a 3x5 array filled with 3.14\n","np.full((3, 5), 3.14)"],"metadata":{"id":"JvZL6KtAxKDP","executionInfo":{"status":"ok","timestamp":1676532470634,"user_tz":-330,"elapsed":96,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"eb9d5470-1856-42b0-fb64-de3dbf98622a","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[3.14, 3.14, 3.14, 3.14, 3.14],\n","       [3.14, 3.14, 3.14, 3.14, 3.14],\n","       [3.14, 3.14, 3.14, 3.14, 3.14]])"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["# Create an array filled with a linear sequence\n","# Starting at 0, ending at 20, stepping by 2\n","# (this is similar to the built-in range() function)\n","np.arange(0, 20, 2)"],"metadata":{"id":"8cljdE71xNvR","executionInfo":{"status":"ok","timestamp":1676532470634,"user_tz":-330,"elapsed":94,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"b615e737-af50-47e1-e049-2e0b52a1077b","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["# Create an array of five values evenly spaced between 0 and 1\n","np.linspace(0, 1, 5)"],"metadata":{"id":"83UbZarFxS6b","executionInfo":{"status":"ok","timestamp":1676532470635,"user_tz":-330,"elapsed":93,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"0c2670fc-1831-410a-ae49-774043d36f5d","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.  , 0.25, 0.5 , 0.75, 1.  ])"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["# Create a 3x3 array of uniformly distributed\n","# random values between 0 and 1\n","np.random.random((3, 3))"],"metadata":{"id":"QXEyH8ZTxW0G","executionInfo":{"status":"ok","timestamp":1676532470635,"user_tz":-330,"elapsed":91,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"5559128e-19ac-4eab-ab7b-da82f098ee76","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.31636215, 0.89753759, 0.49718065],\n","       [0.30375927, 0.76385339, 0.67458862],\n","       [0.18726225, 0.86448068, 0.47525998]])"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["# Create a 3x3 array of normally distributed random values\n","# with mean 0 and standard deviation 1\n","np.random.normal(0, 1, (3, 3))"],"metadata":{"id":"04T8a-AAxbV7","executionInfo":{"status":"ok","timestamp":1676532470636,"user_tz":-330,"elapsed":89,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"d0f54223-a8d4-4090-a431-125e75176381","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 0.06353843, -0.33644743, -0.05611353],\n","       [ 0.38458957,  0.88604736, -0.82599878],\n","       [ 0.54009249,  0.91769824,  0.34241324]])"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["# Create a 3x3 array of random integers in the interval [0, 10)\n","np.random.randint(0, 10, (3, 3))"],"metadata":{"id":"FB6_jCanxez6","executionInfo":{"status":"ok","timestamp":1676532470636,"user_tz":-330,"elapsed":86,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"f7c03af5-ddfa-4b04-8e06-bb90bc55d140","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[2, 1, 4],\n","       [2, 8, 3],\n","       [2, 8, 3]])"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["# Create a 3x3 identity matrix\n","np.eye(5)"],"metadata":{"id":"S8-Pk3q5xmdO","executionInfo":{"status":"ok","timestamp":1676532470637,"user_tz":-330,"elapsed":85,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"31193bc5-d6fe-43ac-870c-73efcaf42b97","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1., 0., 0., 0., 0.],\n","       [0., 1., 0., 0., 0.],\n","       [0., 0., 1., 0., 0.],\n","       [0., 0., 0., 1., 0.],\n","       [0., 0., 0., 0., 1.]])"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["# Create an uninitialized array of three integers\n","# The values will be whatever happens to already exist at that memory location\n","np.empty(3)"],"metadata":{"id":"1OgzEhM2xtF5","executionInfo":{"status":"ok","timestamp":1676532470637,"user_tz":-330,"elapsed":83,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"791a3882-388b-478c-ef5f-852e82bc7d38","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.08333333, 0.05      , 0.01111111])"]},"metadata":{},"execution_count":28}]},{"cell_type":"markdown","source":["## NumPy Standard Data Types\n","\n","NumPy arrays contain values of a single type, so it is important to have detailed knowledge of those types and their limitations.\n","Because NumPy is built in C, the types will be familiar to users of C, Fortran, and other related languages.\n","\n","The standard NumPy data types are listed in the following table.\n","Note that when constructing an array, they can be specified using a string:\n","\n","```python\n","np.zeros(10, dtype='int16')\n","```\n","\n","Or using the associated NumPy object:\n","\n","```python\n","np.zeros(10, dtype=np.int16)\n","```\n","Following table shows all datatypes for Numpy Array\n","\n","| Data type\t    | Description |\n","|---------------|-------------|\n","| ``bool_``     | Boolean (True or False) stored as a byte |\n","| ``int_``      | Default integer type (same as C ``long``; normally either ``int64`` or ``int32``)| \n","| ``intc``      | Identical to C ``int`` (normally ``int32`` or ``int64``)| \n","| ``intp``      | Integer used for indexing (same as C ``ssize_t``; normally either ``int32`` or ``int64``)| \n","| ``int8``      | Byte (-128 to 127)| \n","| ``int16``     | Integer (-32768 to 32767)|\n","| ``int32``     | Integer (-2147483648 to 2147483647)|\n","| ``int64``     | Integer (-9223372036854775808 to 9223372036854775807)| \n","| ``uint8``     | Unsigned integer (0 to 255)| \n","| ``uint16``    | Unsigned integer (0 to 65535)| \n","| ``uint32``    | Unsigned integer (0 to 4294967295)| \n","| ``uint64``    | Unsigned integer (0 to 18446744073709551615)| \n","| ``float_``    | Shorthand for ``float64``.| \n","| ``float16``   | Half precision float: sign bit, 5 bits exponent, 10 bits mantissa| \n","| ``float32``   | Single precision float: sign bit, 8 bits exponent, 23 bits mantissa| \n","| ``float64``   | Double precision float: sign bit, 11 bits exponent, 52 bits mantissa| \n","| ``complex_``  | Shorthand for ``complex128``.| \n","| ``complex64`` | Complex number, represented by two 32-bit floats| \n","| ``complex128``| Complex number, represented by two 64-bit floats| "],"metadata":{"id":"FhIMJjgcx1eD"}},{"cell_type":"markdown","source":["## NumPy Array Attributes\n","\n","We will learn about important Attributes with NumPy Array objects\n","\n","Each array object has attributes ``ndim`` (the number of dimensions), ``shape`` (the size of each dimension), and ``size`` (the total size of the array), the ``dtype``, the data type of the array :"],"metadata":{"id":"_fIZQ4AKzf3e"}},{"cell_type":"code","source":["#Consider following sample arrays\n","np.random.seed(0)  # seed for reproducibility\n","\n","x1 = np.random.randint(10, size=6)  # One-dimensional array\n","x2 = np.random.randint(10, size=(3, 4))  # Two-dimensional array\n","x3 = np.random.randint(10, size=(3, 4, 5))  # Three-dimensional array"],"metadata":{"id":"ord_E53rx0Yx","executionInfo":{"status":"ok","timestamp":1676532470637,"user_tz":-330,"elapsed":81,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["print(\"x3 ndim: \", x3.ndim)\n","print(\"x3 shape:\", x3.shape)\n","print(\"x3 size: \", x3.size)\n","print(\"dtype:\", x3.dtype)"],"metadata":{"id":"X4avCd82z3nZ","executionInfo":{"status":"ok","timestamp":1676532470637,"user_tz":-330,"elapsed":81,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"31a20434-1df4-4ac4-ad62-a28ca0e7c340","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["x3 ndim:  3\n","x3 shape: (3, 4, 5)\n","x3 size:  60\n","dtype: int64\n"]}]},{"cell_type":"markdown","source":["Other attributes include ``itemsize``, which lists the size (in bytes) of each array element, and ``nbytes``, which lists the total size (in bytes) of the array:"],"metadata":{"id":"gD5y17ur0SUY"}},{"cell_type":"code","source":["print(\"itemsize:\", x3.itemsize, \"bytes\")\n","print(\"nbytes:\", x3.nbytes, \"bytes\")"],"metadata":{"id":"iIACfZGJz88F","executionInfo":{"status":"ok","timestamp":1676532470638,"user_tz":-330,"elapsed":80,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"f6fb83ed-0ec2-409c-d35d-ac6772ed17c7","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["itemsize: 8 bytes\n","nbytes: 480 bytes\n"]}]},{"cell_type":"markdown","source":["## Array Indexing: Accessing Single Elements\n","Next we learn how to access single element in a NumPy array\n","NumPy follows indexing similar to that of Python in a dimension index starts at 0 till length-1 \n","\n","So x1[0] will mean 0th element and x1[5] means sixth element in array x1.\n","\n","We can use negative index value to indicate accessing elements from back side of array.\n","\n","In a multi-dimensional array, items can be accessed using a comma-separated tuple of indices as shown in below code cell."],"metadata":{"id":"QhHVb0nMGphd"}},{"cell_type":"code","source":["# acessing third list's first element\n","x2[2, 0]"],"metadata":{"id":"DYhobFMoJV9c","executionInfo":{"status":"ok","timestamp":1676532470638,"user_tz":-330,"elapsed":78,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"8237491e-d35d-47f9-c8a1-cf62cf63e640","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["# accessing second last element from second list \n","x2[1, -2]"],"metadata":{"id":"dm0FVTT8JlL4","executionInfo":{"status":"ok","timestamp":1676532470638,"user_tz":-330,"elapsed":75,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"3132bfa0-9ef7-4f56-c512-8e7954d7bafa","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["8"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["# modifying value at a perticular index\n","x2[0, 0] = 12\n","x2"],"metadata":{"id":"8McLQYbmJ1gb","executionInfo":{"status":"ok","timestamp":1676532470639,"user_tz":-330,"elapsed":74,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"4dc849b6-b20f-4407-aee2-8d382c96dc04","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[12,  5,  2,  4],\n","       [ 7,  6,  8,  8],\n","       [ 1,  6,  7,  7]])"]},"metadata":{},"execution_count":34}]},{"cell_type":"markdown","source":["## Array Slicing: Accessing Subarrays\n","\n","Just as we can use square brackets to access individual array elements, we can also use them to access subarrays with the *slice* notation, marked by the colon (``:``) character.\n","The NumPy slicing syntax follows that of the standard Python list; to access a slice of an array ``x``, use this:\n","``` python\n","x[start:stop:step]\n","```\n","If any of these are unspecified, they default to the values ``start=0``, ``stop=``*``size of dimension``*, ``step=1``.\n","We'll take a look at accessing sub-arrays in one dimension and in multiple dimensions."],"metadata":{"id":"hwr6_1yvKQf9"}},{"cell_type":"markdown","source":["### One-dimensional subarrays"],"metadata":{"id":"aEoCkO4ZLT7W"}},{"cell_type":"code","source":["x = np.arange(10)\n","x"],"metadata":{"id":"YRDpL3ZzLa1V","executionInfo":{"status":"ok","timestamp":1676532470639,"user_tz":-330,"elapsed":72,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"70205b61-5f88-4f85-f78a-2e07a34cabcc","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["x[:5]  # first five elements"],"metadata":{"id":"1J9mkW48LcNL","executionInfo":{"status":"ok","timestamp":1676532470639,"user_tz":-330,"elapsed":70,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"ec490a03-863d-4db1-d92a-9b9b3c843fb2","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 2, 3, 4])"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["x[:5]  # elements after index five"],"metadata":{"id":"fab1B-FYLgKV","executionInfo":{"status":"ok","timestamp":1676532470640,"user_tz":-330,"elapsed":69,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"30ac913a-5a78-4c52-d768-84d13dc30e50","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 2, 3, 4])"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["x[2:7]  # sub-array of index 4, 5, 6"],"metadata":{"id":"5N3cpw-ULiqV","executionInfo":{"status":"ok","timestamp":1676532470640,"user_tz":-330,"elapsed":67,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"afc10bf7-5c01-4a5c-f6e7-840a04fd0c98","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2, 3, 4, 5, 6])"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["x[2::3]  # every other element"],"metadata":{"id":"iNsOAUQDMDx_","executionInfo":{"status":"ok","timestamp":1676532470640,"user_tz":-330,"elapsed":65,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"b233ec3a-5931-49e0-8128-9e2be1cc99cd","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2, 5, 8])"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["x[2::4]  # every other element starting at index 2"],"metadata":{"id":"yilqVhunSU5u","executionInfo":{"status":"ok","timestamp":1676532470641,"user_tz":-330,"elapsed":64,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"77fc578e-46e0-4c08-8435-385187e42a0c","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2, 6])"]},"metadata":{},"execution_count":40}]},{"cell_type":"markdown","source":["A potentially confusing case is when the ``step`` value is negative.\n","In this case, the defaults for ``start`` and ``stop`` are swapped.\n","This becomes a convenient way to reverse an array:"],"metadata":{"id":"o6_sI_lsSlvK"}},{"cell_type":"code","source":["x[::-1]  # all elements, reversed"],"metadata":{"id":"HtaibN6JSlJg","executionInfo":{"status":"ok","timestamp":1676532470641,"user_tz":-330,"elapsed":62,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"284952af-afd6-4cde-e3c9-7c66b81a3d40","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["x[5::-2]  # reversed every other from index 3"],"metadata":{"id":"wbfEp5IESpQT","executionInfo":{"status":"ok","timestamp":1676532470641,"user_tz":-330,"elapsed":60,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"24c1a513-b202-4905-e472-abff3959db29","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([5, 3, 1])"]},"metadata":{},"execution_count":42}]},{"cell_type":"markdown","source":["### Multi-dimensional subarrays\n","\n","Multi-dimensional slices work in the same way, with multiple slices separated by commas.\n","For example:"],"metadata":{"id":"8IIrPEOAVPd_"}},{"cell_type":"code","source":["x2[:3, :3]  # This is sub Array of x2 with first three rows and first three columns"],"metadata":{"id":"phD6ltHjS5b0","executionInfo":{"status":"ok","timestamp":1676532470642,"user_tz":-330,"elapsed":59,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"389c819f-e9a1-4f6b-97fb-3dee8f210e4b","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[12,  5,  2],\n","       [ 7,  6,  8],\n","       [ 1,  6,  7]])"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["#Check how we can reverse the multidimension array\n","x2[::-1, ::-1]"],"metadata":{"id":"LE7O0SIfVa8F","executionInfo":{"status":"ok","timestamp":1676532470642,"user_tz":-330,"elapsed":57,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"60abcbdd-b312-42b6-8c4d-efe60bbe490d","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 7,  7,  6,  1],\n","       [ 8,  8,  6,  7],\n","       [ 4,  2,  5, 12]])"]},"metadata":{},"execution_count":44}]},{"cell_type":"markdown","source":["#### Accessing array rows and columns\n","\n","One commonly needed routine is accessing of single rows or columns of an array.\n","This can be done by combining indexing and slicing, using an empty slice marked by a single colon (``:``):"],"metadata":{"id":"ikdPJUKUW0lU"}},{"cell_type":"code","source":["print(x2[:, 2])  # third column of x2"],"metadata":{"id":"pmv7b_0jVa0Y","executionInfo":{"status":"ok","timestamp":1676532470643,"user_tz":-330,"elapsed":56,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"d0953f70-2e86-4b35-89c6-c477c1dbac35","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["[2 8 7]\n"]}]},{"cell_type":"code","source":["print(x2[1, :])  # second row of x2"],"metadata":{"id":"xB51GFTNW5b8","executionInfo":{"status":"ok","timestamp":1676532470643,"user_tz":-330,"elapsed":54,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"e8b0518b-d7ff-4ba4-c555-4839de960e6a","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["[7 6 8 8]\n"]}]},{"cell_type":"markdown","source":["### Subarrays as no-copy views\n","\n","One important–and extremely useful–thing to know about array slices is that they return *views* rather than *copies* of the array data.\n","This is one area in which NumPy array slicing differs from Python list slicing: in lists, slices will be copies.\n","Consider our two-dimensional array from before:"],"metadata":{"id":"Z7qeID5QXLv_"}},{"cell_type":"code","source":["#Extract 3*2 sub array from x2\n","x2_sub = x2[:3, :2]\n","print(x2_sub)"],"metadata":{"id":"YqS3iYj7XNgB","executionInfo":{"status":"ok","timestamp":1676532470643,"user_tz":-330,"elapsed":51,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"9b764b79-91c7-4901-dbc1-9d3f4bc2c7ba","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["[[12  5]\n"," [ 7  6]\n"," [ 1  6]]\n"]}]},{"cell_type":"code","source":["x2_sub[0, 0] = 99\n","#Above statement not oly modifies subarray but also the original array as well\n","print(x2_sub)"],"metadata":{"id":"Cu0tFyfcXZqp","executionInfo":{"status":"ok","timestamp":1676532470644,"user_tz":-330,"elapsed":50,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"a6428c63-77ee-4084-bd2e-ae5b77da9fa0","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["[[99  5]\n"," [ 7  6]\n"," [ 1  6]]\n"]}]},{"cell_type":"markdown","source":["Despite the nice features of array views, it is sometimes useful to instead explicitly copy the data within an array or a subarray. This can be most easily done with the ``copy()`` method:"],"metadata":{"id":"KuxFe4X4XrLA"}},{"cell_type":"code","source":["x2_sub[0, 0] = 42\n","print(x2_sub)\n","print(x2)"],"metadata":{"id":"SK11XTrXYqhl","executionInfo":{"status":"ok","timestamp":1676532470644,"user_tz":-330,"elapsed":49,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"0c4ca563-342b-4134-d9f9-e3a4d5258f40","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["[[42  5]\n"," [ 7  6]\n"," [ 1  6]]\n","[[42  5  2  4]\n"," [ 7  6  8  8]\n"," [ 1  6  7  7]]\n"]}]},{"cell_type":"markdown","source":["## Array Concatenation and Splitting\n","\n","All of the preceding routines worked on single arrays. It's also possible to combine multiple arrays into one, and to conversely split a single array into multiple arrays. We'll take a look at those operations here.\n","\n","\n","### Concatenation of arrays\n","\n","Concatenation, or joining of two arrays in NumPy, is primarily accomplished using the routines ``np.concatenate``, ``np.vstack``, and ``np.hstack``.\n","``np.concatenate`` takes a tuple or list of arrays as its first argument, as we can see here:"],"metadata":{"id":"weHsUSMJY1DT"}},{"cell_type":"code","source":["x = np.array([2, 4, 6])\n","y = np.array([3, 6, 9])\n","np.concatenate([x, y])"],"metadata":{"id":"efGYrUJqZTkB","executionInfo":{"status":"ok","timestamp":1676532470644,"user_tz":-330,"elapsed":46,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"83f603c0-bd2f-44e1-9350-2b5cd71d1211","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2, 4, 6, 3, 6, 9])"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","source":["grid = np.array([[1, 2, 3],\n","                 [4, 5, 6]])"],"metadata":{"id":"nIppqCTKZZ_k","executionInfo":{"status":"ok","timestamp":1676532470644,"user_tz":-330,"elapsed":44,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}}},"execution_count":51,"outputs":[]},{"cell_type":"code","source":["# concatenate along the first axis\n","np.concatenate([grid, grid])"],"metadata":{"id":"mSqvbZmeZbLK","executionInfo":{"status":"ok","timestamp":1676532470645,"user_tz":-330,"elapsed":45,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"5f61f052-6640-4c4b-ff72-9320edd8af9d","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1, 2, 3],\n","       [4, 5, 6],\n","       [1, 2, 3],\n","       [4, 5, 6]])"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["# concatenate along the second axis (first-indexed)\n","np.concatenate([grid, grid], axis=1)"],"metadata":{"id":"TXZ2uJjEZeZX","executionInfo":{"status":"ok","timestamp":1676532470645,"user_tz":-330,"elapsed":43,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"66adc56f-6648-4dfb-d427-d4223fa66a06","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1, 2, 3, 1, 2, 3],\n","       [4, 5, 6, 4, 5, 6]])"]},"metadata":{},"execution_count":53}]},{"cell_type":"markdown","source":["When joining arrays of mixed dimensions, it can be clearer to use the ``np.vstack`` (vertical stack) and ``np.hstack`` (horizontal stack) functions as shown below:"],"metadata":{"id":"V2_6-QWHZngr"}},{"cell_type":"code","source":["x = np.array([1, 2, 3])\n","grid = np.array([[6, 5, 4],\n","                 [7, 8, 9]])\n","\n","# vertically stack the arrays\n","np.vstack([x, grid])"],"metadata":{"id":"vEPmTdZ2ZzCS","executionInfo":{"status":"ok","timestamp":1676532470645,"user_tz":-330,"elapsed":41,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"466c30b7-e444-415f-de86-2b2eba1d554d","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1, 2, 3],\n","       [6, 5, 4],\n","       [7, 8, 9]])"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["# horizontally stack the arrays\n","y = np.array([[42],\n","              [42]])\n","np.hstack([grid, y])"],"metadata":{"id":"PWrrAOr-Z1s2","executionInfo":{"status":"ok","timestamp":1676532470646,"user_tz":-330,"elapsed":40,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"64741d2c-bdf1-4835-eb9c-3b28f452da3d","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":55,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 6,  5,  4, 42],\n","       [ 7,  8,  9, 42]])"]},"metadata":{},"execution_count":55}]},{"cell_type":"markdown","source":["### Splitting of arrays\n","\n","The opposite of concatenation is splitting, which is implemented by the functions ``np.split``, ``np.hsplit``, and ``np.vsplit``.  For each of these, we can pass a list of indices giving the split points:"],"metadata":{"id":"bB5Ib1CsZ2rM"}},{"cell_type":"code","source":["x = [1, 2, 3, 99, 99, 3, 2, 1]\n","x1, x2, x3 = np.split(x, [1, 4])\n","print(x1, x2, x3)"],"metadata":{"id":"TZTwODYMZ-1J","executionInfo":{"status":"ok","timestamp":1676532470646,"user_tz":-330,"elapsed":38,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"38e044b9-b4a3-47b3-ddd4-afb0f669115b","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["[1] [ 2  3 99] [99  3  2  1]\n"]}]},{"cell_type":"markdown","source":["Notice that *N* split-points, leads to *N + 1* subarrays.\n","The related functions ``np.hsplit`` and ``np.vsplit`` are similar:"],"metadata":{"id":"dfhXzVNJaJF6"}},{"cell_type":"code","source":["grid = np.arange(16).reshape((4, 4))\n","grid"],"metadata":{"id":"j6Q3sbZmZ_kL","executionInfo":{"status":"ok","timestamp":1676532470646,"user_tz":-330,"elapsed":36,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"3b1cb89f-ea23-4d50-91a2-4a52b9c86bea","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 0,  1,  2,  3],\n","       [ 4,  5,  6,  7],\n","       [ 8,  9, 10, 11],\n","       [12, 13, 14, 15]])"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["upper, lower = np.vsplit(grid, [3])\n","print(upper)\n","print(lower)"],"metadata":{"id":"DNG8leinaMMa","executionInfo":{"status":"ok","timestamp":1676532470647,"user_tz":-330,"elapsed":35,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"f0967b67-12ff-4808-d733-e071203e9d6e","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 0  1  2  3]\n"," [ 4  5  6  7]\n"," [ 8  9 10 11]]\n","[[12 13 14 15]]\n"]}]},{"cell_type":"code","source":["left, right = np.hsplit(grid, [2])\n","print(right)\n","print(left)"],"metadata":{"id":"I94NlVPXaOfI","executionInfo":{"status":"ok","timestamp":1676532470647,"user_tz":-330,"elapsed":33,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"ef1fc1ca-3ace-495f-e627-2c8ea25a816f","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 2  3]\n"," [ 6  7]\n"," [10 11]\n"," [14 15]]\n","[[ 0  1]\n"," [ 4  5]\n"," [ 8  9]\n"," [12 13]]\n"]}]},{"cell_type":"markdown","source":["## Introducing UFuncs\n","\n","For many types of operations, NumPy provides a convenient interface into just this kind of statically typed, compiled routine. This is known as a *vectorized* operation.\n","This can be accomplished by simply performing an operation on the array, which will then be applied to each element.\n","This vectorized approach is designed to push the loop into the compiled layer that underlies NumPy, leading to much faster execution."],"metadata":{"id":"OzROt5Aa_Qxx"}},{"cell_type":"code","source":["#Consider following loop based implementation to ind reciprocals for each element of an array\n","np.random.seed(0)\n","\n","def compute_reciprocals(values):\n","    output = np.empty(len(values))\n","    for i in range(len(values)):\n","        output[i] = 1.0 / values[i]\n","    return output\n","        \n","big_array = np.random.randint(1, 100, size=1000000)\n","%timeit compute_reciprocals(big_array)"],"metadata":{"id":"aW_dwQab_dPF","executionInfo":{"status":"ok","timestamp":1676532490761,"user_tz":-330,"elapsed":20144,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"9b1ce49b-a998-4fda-84f3-3734f4397d14","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["2.6 s ± 188 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"]}]},{"cell_type":"code","source":["#Same operatoin using UFuncs applying '/' over array elements\n","%timeit (1.0 / big_array)"],"metadata":{"id":"C1qvC-0X_2Ue","executionInfo":{"status":"ok","timestamp":1676532500511,"user_tz":-330,"elapsed":9754,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"acdcb908-e131-4d50-bb21-835008706f65","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":61,"outputs":[{"output_type":"stream","name":"stdout","text":["1.17 ms ± 22.3 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n"]}]},{"cell_type":"markdown","source":["Vectorized operations in NumPy are implemented via *ufuncs*, whose main purpose is to quickly execute repeated operations on values in NumPy arrays. UFuncs are extremely flexible – before we saw an operation between a scalar and an array, but we can also operate between two arrays as well as multidimentional arrays.\n","\n","Computations using vectorization through ufuncs are nearly always more efficient than their counterpart implemented using Python loops, especially as the arrays grow in size.\n","Any time you see such a loop in a Python script, you should consider whether it can be replaced with a vectorized expression."],"metadata":{"id":"zWEw0XwOATnq"}},{"cell_type":"markdown","source":["## Exploring NumPy's UFuncs\n","\n","Ufuncs exist in two flavors: *unary ufuncs*, which operate on a single input, and *binary ufuncs*, which operate on two inputs.\n","\n","\n","### Array arithmetic\n","\n","NumPy's ufuncs feel very natural to use because they make use of Python's native arithmetic operators.\n","The standard addition, subtraction, multiplication, and division can all be used:"],"metadata":{"id":"LmvTAwQxBeu9"}},{"cell_type":"code","source":["x = np.arange(4)\n","print(\"x     =\", x)\n","print(\"x + 5 =\", x + 5)\n","print(\"x - 5 =\", x - 5)\n","print(\"x * 2 =\", x * 2)\n","print(\"x / 2 =\", x / 2)\n","print(\"x // 2 =\", x // 2)  # floor division\n","#some advanced arithmatic expression   -(x/2+1)^2 \n","-(0.5*x + 1) ** 2"],"metadata":{"id":"nR25dPabASNy","executionInfo":{"status":"ok","timestamp":1676535992501,"user_tz":-330,"elapsed":376,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"575dd820-554c-4967-9b21-1ebcfcb28225","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":70,"outputs":[{"output_type":"stream","name":"stdout","text":["x     = [0 1 2 3]\n","x + 5 = [5 6 7 8]\n","x - 5 = [-5 -4 -3 -2]\n","x * 2 = [0 2 4 6]\n","x / 2 = [0.  0.5 1.  1.5]\n","x // 2 = [0 0 1 1]\n"]},{"output_type":"execute_result","data":{"text/plain":["array([-1.  , -2.25, -4.  , -6.25])"]},"metadata":{},"execution_count":70}]},{"cell_type":"markdown","source":["The following table lists the arithmetic operators implemented in NumPy:\n","\n","| Operator\t    | Equivalent ufunc    | Description                           |\n","|---------------|---------------------|---------------------------------------|\n","|``+``          |``np.add``           |Addition (e.g., ``1 + 1 = 2``)         |\n","|``-``          |``np.subtract``      |Subtraction (e.g., ``3 - 2 = 1``)      |\n","|``-``          |``np.negative``      |Unary negation (e.g., ``-2``)          |\n","|``*``          |``np.multiply``      |Multiplication (e.g., ``2 * 3 = 6``)   |\n","|``/``          |``np.divide``        |Division (e.g., ``3 / 2 = 1.5``)       |\n","|``//``         |``np.floor_divide``  |Floor division (e.g., ``3 // 2 = 1``)  |\n","|``**``         |``np.power``         |Exponentiation (e.g., ``2 ** 3 = 8``)  |\n","|``%``          |``np.mod``           |Modulus/remainder (e.g., ``9 % 4 = 1``)|"],"metadata":{"id":"a0WbgBQiB-i4"}},{"cell_type":"markdown","source":["### Specialized ufuncs\n","\n","NumPy has many more ufuncs available, including hyperbolic trig functions, bitwise arithmetic, comparison operators, conversions from radians to degrees, rounding and remainders, and much more.\n","A look through the NumPy documentation reveals a lot of interesting functionality.\n","\n","Another excellent source for more specialized and obscure ufuncs is the submodule ``scipy.special``.\n","If you want to compute some obscure mathematical function on your data, chances are it is implemented in ``scipy.special``.\n","There are far too many functions to list them all, but the following snippet shows a couple that might come up in a statistics context:"],"metadata":{"id":"igbeuwzCCSNq"}},{"cell_type":"code","source":["#importing package special from scipy package\n","from scipy import special"],"metadata":{"id":"lLWR2D17CXup","executionInfo":{"status":"ok","timestamp":1676535992961,"user_tz":-330,"elapsed":10,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}}},"execution_count":71,"outputs":[]},{"cell_type":"code","source":["# Gamma functions (generalized factorials) and related functions\n","x = [3, 4, 9]\n","print(\"gamma(x)     =\", special.gamma(x))\n","print(\"ln|gamma(x)| =\", special.gammaln(x))\n","print(\"beta(x, 2)   =\", special.beta(x, 2))"],"metadata":{"id":"zZIUIA_TCm3N","executionInfo":{"status":"ok","timestamp":1676535992961,"user_tz":-330,"elapsed":8,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"8ce84901-30e9-4118-cec3-771174c9187f","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":72,"outputs":[{"output_type":"stream","name":"stdout","text":["gamma(x)     = [2.000e+00 6.000e+00 4.032e+04]\n","ln|gamma(x)| = [ 0.69314718  1.79175947 10.6046029 ]\n","beta(x, 2)   = [0.08333333 0.05       0.01111111]\n"]}]},{"cell_type":"markdown","source":["Many other special functions like error functions, beta integral can also be evaluated."],"metadata":{"id":"NLnCoznWCoE9"}},{"cell_type":"markdown","source":["### Aggregates\n","\n","For binary ufuncs, there are some interesting aggregates that can be computed directly from the object.\n","For example, if we'd like to *reduce* an array with a particular operation, we can use the ``reduce`` method of any ufunc.\n","A reduce repeatedly applies a given operation to the elements of an array until only a single result remains.\n","\n","For example, calling ``reduce`` on the ``add`` ufunc returns the sum of all elements in the array:"],"metadata":{"id":"IQRLOEyhC7h_"}},{"cell_type":"code","source":["x = np.arange(1, 6)\n","np.add.reduce(x)"],"metadata":{"id":"S-tqV3rWDTQT","executionInfo":{"status":"ok","timestamp":1676535992962,"user_tz":-330,"elapsed":7,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"564df272-625f-469a-9633-d1018a9016b0","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":73,"outputs":[{"output_type":"execute_result","data":{"text/plain":["15"]},"metadata":{},"execution_count":73}]},{"cell_type":"code","source":["np.multiply.reduce(x)"],"metadata":{"id":"eyx37Xz9DUEK","executionInfo":{"status":"ok","timestamp":1676535992962,"user_tz":-330,"elapsed":6,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"8e7d7d6b-6e29-491a-cd87-80ea1c8fc503","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":74,"outputs":[{"output_type":"execute_result","data":{"text/plain":["120"]},"metadata":{},"execution_count":74}]},{"cell_type":"code","source":["#note the difference in output with accumulate\n","np.add.accumulate(x)"],"metadata":{"id":"clon3tBiDWql","executionInfo":{"status":"ok","timestamp":1676535992962,"user_tz":-330,"elapsed":6,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"876f169b-9d9d-464f-849f-a77f2ab81a02","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":75,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 1,  3,  6, 10, 15])"]},"metadata":{},"execution_count":75}]},{"cell_type":"markdown","source":["**Answer Following Questions :** (You should either type the answer in separate text cell or code cell as per questoins asked)\n","          \n","\n","\n","1.   What are UFuncs un numpy?\n","\n","\n","Ans. Ufuncs are used to implement vectorization in NumPy which is way faster than iterating over elements. They also provide broadcasting and additional methods like reduce, accumulate etc. that are very helpful for computation."],"metadata":{"id":"m56WFV4aELVz"}},{"cell_type":"markdown","source":["2. Which are various attributes of numpy array objects?\n","\n","Ans. NumPy - Arrays - Attributes of a NumPy Array\n","\n","(1) ndarray.ndim. ndim represents the number of dimensions (axes) of the ndarray. \n","\n","(2) ndarray.shape. shape is a tuple of integers representing the size of the ndarray in each dimension. \n","\n","(3) ndarray.size. size is the total number of elements in the ndarray. It is equal to the product of elements of the shape.\n","\n","(4) ndarray.dtype. dtype tells the data type of the elements of a NumPy array. In NumPy array, all the elements have the same data type.\n","\n","(5) ndarray.itemsize. itemsize returns the size (in bytes) of each element of a NumPy array."],"metadata":{"id":"GceYUOWWKpH2"}},{"cell_type":"markdown","source":["3. If you have 3 dimentional array in numpy object Obj how to identify its size, type and dimentions ?\n","\n","Ans. You can get the number of dimensions, shape (length of each dimension), and size (number of all elements) of the NumPy array with ndim, shape, and size attributes of numpy.ndarray. The built-in function len() returns the size of the first dimension.\n","\n","Number of dimensions of the NumPy array: ndim\n","\n","Shape of the NumPy array: shape\n","\n","Size of the NumPy array: size\n","\n","Size of the first dimension of the NumPy array: len()"],"metadata":{"id":"pX-kGO2KMAyi"}},{"cell_type":"markdown","source":["4.   Consider Obj object has dimentions 3\\*4\\*2  and you want to convert it to 4\\*6 shape exlpain how will you do it ? Show this using a code cell, taking an example of 3\\*4*2 np array of random int between 1 and 50.\n","\n","Ans."],"metadata":{"id":"7ofxoe9IOuLw"}},{"cell_type":"code","source":["import numpy as np\n","# Create a 3*4*2 array of random integers between 1 and 50\n","obj = np.random.randint(1,50, size=(3,4,2))\n","print(\"Original object:\\n\",obj)\n","\n","# Reshape the array to 4*6 shape\n","subObj = obj.reshape((4,6))\n","print(\"Reshaped object:\\n\", subObj)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Bno5SetcSauQ","executionInfo":{"status":"ok","timestamp":1676535992963,"user_tz":-330,"elapsed":6,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"12f08e0d-a7ec-492c-c925-687321175347"},"execution_count":76,"outputs":[{"output_type":"stream","name":"stdout","text":["Original object:\n"," [[[17  1]\n","  [14 20]\n","  [45 36]\n","  [30 12]]\n","\n"," [[28 29]\n","  [22  6]\n","  [44 39]\n","  [33 44]]\n","\n"," [[18 25]\n","  [ 7 42]\n","  [27 26]\n","  [24 12]]]\n","Reshaped object:\n"," [[17  1 14 20 45 36]\n"," [30 12 28 29 22  6]\n"," [44 39 33 44 18 25]\n"," [ 7 42 27 26 24 12]]\n"]}]},{"cell_type":"markdown","source":["5. Consider above 4\\*6 array, sample 2\\*3 sub array from left bottom of this array store the result in varible subObj variable.\n"],"metadata":{"id":"2oJgnh4QTr-6"}},{"cell_type":"code","source":["# Extract a 2x3 sub-array from the bottom left of the reshaped array \n","sub_array = subObj[2:4, 0:3] \n","print(\"Sub-array:\\n\", sub_array)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xvz3F_qoVJSS","executionInfo":{"status":"ok","timestamp":1676536057256,"user_tz":-330,"elapsed":10,"user":{"displayName":"Sairaj Shivalkar","userId":"13125960531280074251"}},"outputId":"3d5d38c6-e84f-4b91-84d9-79deef5599b9"},"execution_count":78,"outputs":[{"output_type":"stream","name":"stdout","text":["Sub-array:\n"," [[44 39 33]\n"," [ 7 42 27]]\n"]}]},{"cell_type":"markdown","source":["**Conclusion** : Thus we have learned basics of Numpy library for storing and efficiently processing any external data into python execution pipeline."],"metadata":{"id":"MS7kUTQEVn7P"}}]}